import{_ as n,c as s,o as a,a as t}from"./app.47332df7.js";const g='{"title":"Routing","description":"","frontmatter":{},"headers":[{"level":2,"title":"Basic","slug":"basic"},{"level":2,"title":"Response","slug":"response"}],"relativePath":"routing.md"}',p={},o=t(`<h1 id="routing" tabindex="-1">Routing <a class="header-anchor" href="#routing" aria-hidden="true">#</a></h1><h2 id="basic" tabindex="-1">Basic <a class="header-anchor" href="#basic" aria-hidden="true">#</a></h2><p>The most basic routes accept a path and a closure returning a string:</p><div class="language-go"><pre><code>router<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;/test&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token string">&quot;hello-world&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>All possible methods:</p><div class="language-go"><pre><code>router<span class="token punctuation">.</span><span class="token function">Head</span><span class="token punctuation">(</span><span class="token string">&quot;/test&quot;</span><span class="token punctuation">,</span> callback<span class="token punctuation">)</span>
router<span class="token punctuation">.</span><span class="token function">Post</span><span class="token punctuation">(</span><span class="token string">&quot;/test&quot;</span><span class="token punctuation">,</span> callback<span class="token punctuation">)</span>
router<span class="token punctuation">.</span><span class="token function">Put</span><span class="token punctuation">(</span><span class="token string">&quot;/test&quot;</span><span class="token punctuation">,</span> callback<span class="token punctuation">)</span>
router<span class="token punctuation">.</span><span class="token function">Patch</span><span class="token punctuation">(</span><span class="token string">&quot;/test&quot;</span><span class="token punctuation">,</span> callback<span class="token punctuation">)</span>
router<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token string">&quot;/test&quot;</span><span class="token punctuation">,</span> callback<span class="token punctuation">)</span>
router<span class="token punctuation">.</span><span class="token function">Connect</span><span class="token punctuation">(</span><span class="token string">&quot;/test&quot;</span><span class="token punctuation">,</span> callback<span class="token punctuation">)</span>
router<span class="token punctuation">.</span><span class="token function">Options</span><span class="token punctuation">(</span><span class="token string">&quot;/test&quot;</span><span class="token punctuation">,</span> callback<span class="token punctuation">)</span>
router<span class="token punctuation">.</span><span class="token function">Trace</span><span class="token punctuation">(</span><span class="token string">&quot;/test&quot;</span><span class="token punctuation">,</span> callback<span class="token punctuation">)</span>
</code></pre></div><p>Sometimes you may need to register a route that responds to multiple HTTP methods. To do so register the route with <code>router.Match</code></p><div class="language-go"><pre><code>router<span class="token punctuation">.</span><span class="token function">Match</span><span class="token punctuation">(</span><span class="token string">&quot;/test&quot;</span><span class="token punctuation">,</span> callback<span class="token punctuation">,</span> http<span class="token punctuation">.</span>MethodGet<span class="token punctuation">,</span> http<span class="token punctuation">.</span>MethodPost<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">)</span>

<span class="token comment">// since Match is a variadic function you can also pass it like below</span>
httpMethods <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>http<span class="token punctuation">.</span>MethodPut<span class="token punctuation">,</span> http<span class="token punctuation">.</span>MethodPatch<span class="token punctuation">}</span>
router<span class="token punctuation">.</span><span class="token function">Match</span><span class="token punctuation">(</span><span class="token string">&quot;/test&quot;</span><span class="token punctuation">,</span> callback<span class="token punctuation">,</span> httpMethods<span class="token operator">...</span><span class="token punctuation">)</span>
</code></pre></div><p>Sometimes you want that one route responds to all HTTP methods. If so you can define it with <code>router.Any</code></p><div class="language-go"><pre><code>router<span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span><span class="token string">&quot;/test&quot;</span><span class="token punctuation">,</span> callback<span class="token punctuation">)</span>
</code></pre></div><p>Evoli provide you an easy way to your app to return a json. To achieve this your handler should return a struct, slice or array</p><div class="language-go"><pre><code><span class="token keyword">func</span> <span class="token function">testStruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">struct</span><span class="token punctuation">{</span> Test <span class="token builtin">string</span> <span class="token punctuation">}</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">struct</span><span class="token punctuation">{</span> Test <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">testSlice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;hiho&quot;</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">testArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">uint8</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">uint8</span><span class="token punctuation">{</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>No worries, Evoli will set the &quot;application/json&quot; header for you.</p><h2 id="response" tabindex="-1">Response <a class="header-anchor" href="#response" aria-hidden="true">#</a></h2><p>To be more explicit about the response we could return a Response object Currently there are three types of responses</p><ul><li>String</li><li>Json</li><li>View</li></ul><div class="language-go"><pre><code><span class="token keyword">func</span> <span class="token function">testString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> StringResponse <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token string">&quot;hello-world&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">testJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> JsonResponse <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">Json</span><span class="token punctuation">(</span><span class="token keyword">struct</span><span class="token punctuation">{</span> Test <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">testView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ViewResponse <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">View</span><span class="token punctuation">(</span><span class="token string">&quot;path.to.view&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div>`,17),e=[o];function c(u,l,i,k,r,d){return a(),s("div",null,e)}var f=n(p,[["render",c]]);export{g as __pageData,f as default};
